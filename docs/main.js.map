{"version":3,"sources":["./src/components/layout/body/body.component.ts","./src/components/layout/body/body.component.html","./src/components/layout/breadcrumbs/breadcrumbs.component.ts","./src/components/layout/breadcrumbs/breadcrumbs.component.html","./src/components/countries/country-details/country-details.component.ts","./src/components/countries/country-details/country-details.component.html","./src/utils/is-array.ts","./src/environments/environment.ts","./src/store/index.ts","./src/components/layout/header/header.component.ts","./src/components/layout/header/header.component.html","./src/components/regions/regions-item/regions-item.component.ts","./src/components/regions/regions-item/regions-item.component.html","./src/store/actions/world.actions.ts","./src/components/layout/modal/modal.component.ts","./src/components/layout/modal/modal.component.html","./src/utils/capitalize.ts","./src/components/countries/countries-list/countries-list.component.ts","./src/components/countries/countries-list/countries-list.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/components/regions/regions/regions.component.ts","./src/components/regions/regions/regions.component.html","./src/app/app.module.ts","./src/store/effects/world.effects.ts","./src/components/regions/regions-list/regions-list.component.ts","./src/components/regions/regions-list/regions-list.component.html","./src/store/reducers/world.reducer.ts","./src/components/countries/countries/countries.component.ts","./src/components/countries/countries/countries.component.html","./src/pipes/thousand-suffixes.pipe.ts","./src/components/layout/wizard/wizard.component.ts","./src/components/layout/wizard/wizard.component.html","./src/components/layout/spinner/spinner.component.ts","./src/components/layout/spinner/spinner.component.html","./src/pipes/join.pipe.ts","./src/services/world.service.ts","./src/models/namespaces/regions.namespace.ts","./src/components/layout/footer/footer.component.ts","./src/components/layout/footer/footer.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'body-component',\n  templateUrl: './body.component.html',\n  styleUrls: ['./body.component.scss']\n})\nexport class BodyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n    <router-outlet></router-outlet>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'breadcrumbs-component',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss']\n})\nexport class BreadcrumbsComponent implements OnInit {\n\n  @Input() breadcrumbs: {\n    route: string,\n    routeName: string\n  }[];\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onClickParentUrl(route: string) {\n    if (route !== null) {\n      this.router.navigateByUrl(route);\n    }\n  }\n\n}\n","<div class=\"breadcrumbs-row\">\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbs; index as i\">\n        <span \n            [ngClass]=\"i === breadcrumbs.length-1 ? 'active' : 'primary-500-fg'\" \n            (click)=\"onClickParentUrl(breadcrumb.route)\">\n            {{breadcrumb.routeName}}\n        </span>\n        <img *ngIf=\"i < breadcrumbs.length - 1\" class=\"crumb-icon\" src=\"assets/images/next.svg\">\n    </ng-container>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Country } from 'src/models/interfaces/country.model';\nimport { Region } from 'src/models/types/region.type';\nimport { AppState } from 'src/store';\nimport { GetCountryDetails } from 'src/store/actions/world.actions';\nimport { capitalizeFirstLetter } from 'src/utils/capitalize';\nimport { country } from '../../../store/index';\n\n@Component({\n  selector: 'country-details-component',\n  templateUrl: './country-details.component.html',\n  styleUrls: ['./country-details.component.scss']\n})\nexport class CountryDetailsComponent implements OnInit {\n\n  public countryName: string;\n  public region: Region;\n  public country$: Observable<Country>;\n  public routeForBreadcrumbs: {\n    route: string;\n    routeName: string;\n  }[];\n\n\n  constructor(private route: ActivatedRoute, private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.region = this.route.snapshot.paramMap.get('region') as Region;\n    this.countryName = this.route.snapshot.paramMap.get('country');\n    this.store.dispatch(new GetCountryDetails({regionName: this.region, countryName: this.countryName}));\n\n    this.routeForBreadcrumbs = [\n      {\n        route: '/regions',\n        routeName: 'Regions'\n      },\n      {\n        route: '/regions/' + this.region,\n        routeName: capitalizeFirstLetter(this.region)\n      },\n      {\n        route: '/regions/' + this.region + '/' + this.countryName,\n        routeName: this.countryName\n      }\n    ]\n\n  this.country$ = this.store.pipe(\n    select(country, {\n      regionName: this.region,\n      country: this.countryName\n    }),\n    filter((country) => !!country)\n    )\n  }\n}\n","<div class=\"country-details\">\n    <header class=\"country-details__header\">\n            <breadcrumbs-component [breadcrumbs]=\"routeForBreadcrumbs\"></breadcrumbs-component>\n            <img src=\"assets/images/triangle.svg\" alt=\"triangle\" class=\"country-details__triangle\">\n            <h1 class=\"country-details__title\">\n                {{countryName}}\n            </h1>\n            <p class=\"country-details__description\">\n                Below you will find more information about the country you have selected.\n            </p>\n    </header>\n    <section class=\"country-details__body\">\n        <div class=\"country-details__flag-wrapper\">\n            <img [src]=\"(country$ | async)?.flags?.svg\" alt=\"flag\" class=\"country-details__flag\">\n        </div>\n        <div class=\"country-details__description-box\">\n            <h2 class=\"description-box__title\">\n                {{(country$ | async)?.name?.official}}\n            </h2>\n            <div class=\"description-box__details\">\n\n                <div class=\"details__box\">\n                    <span class=\"details__label\">\n                        Capital(s):\n                    </span>\n                    <span class=\"details__text\">\n                        {{(country$ | async)?.capital | join : '; '}}\n                    </span>\n                </div>\n\n                <div class=\"details__box\">\n                    <span class=\"details__label\">\n                        Currencies:\n                    </span>\n                    <span class=\"details__text text--one-line\" \n                    *ngFor=\"let currency of (country$ | async)?.currencies | keyvalue; let last = last;\"\n                    >\n                        <ng-container *ngIf=\"(country$ | async)?.currencies.length > 0 && !last; else oneCurrency\">\n                            {{currency.key + ';'}}\n                        </ng-container>\n                        <ng-template #oneCurrency>\n                            {{currency.key}}\n                        </ng-template>\n                    </span>\n                </div>\n\n                <div class=\"details__box\">\n                    <span class=\"details__label\">\n                        Population:\n                    </span>\n                    <span class=\"details__text\">\n                        {{(country$ | async)?.population | thousandSuff : 2}}\n                    </span>\n                </div>\n\n                <div class=\"details__box\">\n                    <span class=\"details__label\">\n                        Subregion:\n                    </span>\n                    <span class=\"details__text\">\n                        {{(country$ | async)?.subregion}}\n                    </span>\n                </div>\n\n                <div class=\"details__box\">\n                    <span class=\"details__label\">\n                        Languages:\n                    </span>\n                    <span class=\"details__text text--one-line\" \n                    *ngFor=\"let language of (country$ | async)?.languages | keyvalue; let last = last;\"\n                    >\n                        <ng-container *ngIf=\"(country$ | async)?.languages.length > 0 && !last; else oneLanguage\">\n                            {{language.value + ';'}}\n                        </ng-container>\n                        <ng-template #oneLanguage>\n                            {{language.value}}\n                        </ng-template>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </section>\n</div>\n","export function isArray(value: any): boolean {\r\n    return Array.isArray(value);\r\n}\r\n  ","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  worldApi: 'https://restcountries.com/v3.1/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { ActionReducerMap, createSelector } from \"@ngrx/store\";\r\nimport { Region } from \"src/models/types/region.type\";\r\nimport { worldReducer, WorldState } from \"./reducers/world.reducer\";\r\n\r\nexport interface AppState {\r\n    worldState: WorldState;\r\n}\r\n\r\nexport const Reducers: ActionReducerMap<AppState> = {\r\n    worldState: worldReducer\r\n}\r\n\r\n//selectors \r\nexport const worldState = (state: AppState) => state.worldState;\r\nexport const isLoading = createSelector(worldState, (state: WorldState) => state.isLoading);\r\nexport const countriesForRegion = createSelector(worldState, (state: WorldState, r: Region) => state.regions.find(region => region.name === r)?.countries);\r\nexport const country = createSelector(worldState, (state: WorldState, c: {regionName: Region, country: string}) => \r\n    state.regions.find(region => region.name === c.regionName)?.countries.find(country => country.name.common === c.country));\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Component({\n  selector: 'header-component',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n\n  private rootRoute = '/regions';\n  private subscription = new Subscription();\n  public showGoBackButton = false;\n\n  constructor(private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n\n    this.subscription.add(\n    this.router.events.pipe(filter(event => event instanceof NavigationEnd))\n    .subscribe((event: NavigationEnd) => \n     {\n        if(event.url === this.rootRoute) this.showGoBackButton = false;\n        else this.showGoBackButton = true;          \n     })\n    )\n\n  }\n\n  navigateToHome(): void{\n    this.router.navigate(['/']);\n  }\n\n  goBack(): void {\n    this.router.navigate([this.router.url.substring(0, this.router.url.lastIndexOf('/'))]);\n  }\n\n  ngOnDestroy(): void{\n    this.subscription.unsubscribe();\n  }\n\n}\n","<div class=\"header\">\n    <div class=\"header__logo\" (click)=\"navigateToHome()\">\n        <img class=\"world-icon\" src=\"assets/images/world.svg\" alt=\"world\">\n    </div>\n    <ng-container *ngIf=\"showGoBackButton\">\n        <button class=\"btn outline-primary-btn header__btn\" (click)=\"goBack()\">Go back</button>\n    </ng-container>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Region } from 'src/models/types/region.type';\nimport { AppState } from 'src/store';\nimport { SetRegionActive } from 'src/store/actions/world.actions';\n\n@Component({\n  selector: 'regions-item-component',\n  templateUrl: './regions-item.component.html',\n  styleUrls: ['./regions-item.component.scss']\n})\nexport class RegionsItemComponent implements OnInit {\n\n  @Input() region: Region;\n\n  constructor(private router: Router, private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n  }\n\n  onRegionClick(): void{\n    this.store.dispatch(new SetRegionActive({region: this.region}));\n    this.router.navigate(['/regions', this.region]);\n  }\n\n}\n","<div class=\"regions-item\" (click)=\"onRegionClick()\">\n    <h2 class=\"regions-item__title\">\n        {{region}}\n    </h2>\n    <img src=\"assets/images/triangle.svg\" alt=\"triangle\" class=\"regions-item__triangle\">\n    <div class=\"regions-item__square\">\n        <img [src]=\"'assets/images/' + region + '.svg'\" alt=\"\" class=\"regions-item__continent-img\">\n    </div>\n    <img [src]=\"'assets/images/' + region + '.svg'\" alt=\"\" class=\"regions-item__continent-img-bgc\">\n</div>\n","import { Action } from \"@ngrx/store\";\r\nimport { Country } from \"src/models/interfaces/country.model\";\r\nimport { Region } from \"src/models/types/region.type\";\r\n\r\n\r\nexport namespace WORLD_ACTION {\r\n    export const GET_COUNTRIES_BY_REGION = 'GET_COUNTRIES_BY_REGION';\r\n    export const GET_COUNTRIES_BY_REGION_SUCCESSFULLY = 'GET_COUNTRIES_BY_REGION_SUCCESSFULLY';\r\n    export const GET_COUNTRIES_BY_REGION_FAILED = 'GET_COUNTRIES_BY_REGION_FAILED';\r\n    export const GET_COUNTRY_DETAILS = 'GET_COUNTRY_DETAILS';\r\n    export const GET_COUNTRY_DETAILS_SUCCESSFULLY = 'GET_COUNTRY_DETAILS_SUCCESSFULLY';\r\n    export const GET_COUNTRY_DETAILS_FAILED = 'GET_COUNTRY_DETAILS_FAILED';\r\n    export const SET_REGION_ACTIVE = 'SET_REGION_ACTIVE';\r\n    export const SET_REGIONS_INACTIVE = 'SET_REGIONS_INACTIVE';\r\n    export const SHOW_LOADING_SPINNER = 'SHOW_LOADING_SPINNER';\r\n    export const HIDE_LOADING_SPINNER  = 'HIDE_LOADING_SPINNER';\r\n}\r\n\r\nexport class ShowLoadingSpinner implements Action {\r\n  readonly type: string = WORLD_ACTION.SHOW_LOADING_SPINNER ;\r\nconstructor() {\r\n}\r\n}\r\n\r\nexport class HideLoadingSpinner implements Action {\r\n  readonly type: string = WORLD_ACTION.HIDE_LOADING_SPINNER ;\r\nconstructor() {\r\n}\r\n}\r\n\r\nexport class GetCountriesByRegion implements Action {\r\n    readonly type: string = WORLD_ACTION.GET_COUNTRIES_BY_REGION;\r\n  constructor(public payload: {region: Region}) {\r\n  }\r\n}\r\n\r\nexport class GetCountriesByRegionSuccessfully implements Action {\r\n    readonly type: string = WORLD_ACTION.GET_COUNTRIES_BY_REGION_SUCCESSFULLY;\r\n    constructor(public payload: {regionName: Region, countries: Country[]}) {\r\n  }\r\n}\r\n\r\nexport class GetCountriesByRegionFailed implements Action {\r\n    readonly type: string = WORLD_ACTION.GET_COUNTRIES_BY_REGION_FAILED;\r\n    constructor(public payload: {error: string}) {\r\n  }\r\n}\r\n\r\nexport class GetCountryDetails implements Action {\r\n  readonly type: string = WORLD_ACTION.GET_COUNTRY_DETAILS;\r\nconstructor(public payload: {regionName: Region, countryName: string}) {\r\n}\r\n}\r\n\r\nexport class GetCountryDetailsSuccessfully implements Action {\r\n  readonly type: string = WORLD_ACTION.GET_COUNTRY_DETAILS_SUCCESSFULLY;\r\n  constructor(public payload: {regionName: Region, country: Country}) {\r\n}\r\n}\r\n\r\nexport class GetCountryDetailsFailed implements Action {\r\n  readonly type: string = WORLD_ACTION.GET_COUNTRY_DETAILS_FAILED;\r\n  constructor(public payload: {error: string}) {\r\n}\r\n}\r\n\r\nexport class SetRegionActive implements Action {\r\n    readonly type: string = WORLD_ACTION.SET_REGION_ACTIVE;\r\n  constructor(public payload: {region: Region}) {\r\n  }\r\n}\r\n  \r\nexport class SetRegionInactive implements Action {\r\n  readonly type: string = WORLD_ACTION.SET_REGIONS_INACTIVE;\r\nconstructor() {\r\n}\r\n}","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'modal-component',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n\n  @Input() title: string;\n  @Output() cancelClicked = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  cancel(){\n    this.cancelClicked.emit();\n  }\n\n}\n","<div class=\"modal\">\n    <div class=\"modal__top\">\n        <h3 class=\"modal__title\">\n            {{title}}\n        </h3>\n        <img class=\"modal__close-btn\" (click)=\"cancel()\" src=\"assets/images/close-icon.svg\">\n    </div>\n    <div class=\"modal__content\">\n        <ng-content></ng-content>\n    </div>\n</div>\n<div class=\"overlay\"></div>","export function capitalizeFirstLetter(text: string): string {\r\n    return text.charAt(0).toUpperCase() + text.slice(1);\r\n}","import {  Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Country } from 'src/models/interfaces/country.model';\nimport { Region } from 'src/models/types/region.type';\nimport { AppState } from 'src/store';\nimport { GetCountriesByRegion } from 'src/store/actions/world.actions';\nimport { countriesForRegion } from '../../../store/index';\n\n@Component({\n  selector: 'countries-list-component',\n  templateUrl: './countries-list.component.html',\n  styleUrls: ['./countries-list.component.scss']\n})\nexport class CountriesListComponent implements OnInit {\n\n  public countries$: Observable<Country[]>;\n  public region: Region;\n\n  constructor(private store: Store<AppState>, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n      this.region = this.route.snapshot.paramMap.get('region') as Region;\n      this.store.dispatch(new GetCountriesByRegion({region: this.region}))\n\n    this.countries$ = this.store.pipe(\n      select(countriesForRegion, this.region),\n      filter((countries) => !!countries && countries?.length > 0)\n    )\n  }\n\n  onCountryRowClicked(country: Country): void{\n    this.router.navigate(['/regions', this.region, country.name.common]);\n  }\n\n}\n","\n    <div class=\"countries-list\">\n        <div class=\"countries-list__table-container\">\n            <table class=\"countries-list__table\">\n                <thead>\n                    <tr class=\"countries-list__head-row\">\n                        <th class=\"countries-list__head-cell countries-list__head-cell--first\">\n                            #\n                        </th>\n                        <th class=\"countries-list__head-cell countries-list__head-cell--second\">\n                            Flag\n                        </th>\n                        <th class=\"countries-list__head-cell countries-list__head-cell--third\">\n                            Name\n                        </th>\n                        <th class=\"countries-list__head-cell countries-list__head-cell--fourth\">\n                           Capital\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <ng-container *ngFor=\"let country of countries$ | async; let i = index\">\n                        <tr class=\"countries-list__row\" (click)=\"onCountryRowClicked(country)\">\n                          <td class=\"countries-list__cell countries-list__cell--first\">\n                              <span>{{i + 1}}</span>\n                          </td>\n                          <td class=\"countries-list__cell countries-list__cell--second\">\n                            <img class=\"countries-list__flag\" [src]=\"country.flags.svg\" alt=\"flag\">\n                          </td>\n                          <td class=\"countries-list__cell countries-list__cell--third\">\n                             {{country.name.official}}\n                          </td>\n                          <td class=\"countries-list__cell countries-list__cell--fourth\">\n                            {{country.capital ? (country.capital | join : '; ') : '-'}}\n                          </td>\n                      </tr> \n                    </ng-container>\n                </tbody>\n            </table>\n        </div>\n</div>\n","import { Component } from \"@angular/core\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'CountriesApp';\n}\n","<div>\n  <wizard-component></wizard-component>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'regions-component',\n  templateUrl: './regions.component.html',\n  styleUrls: ['./regions.component.scss']\n})\nexport class RegionsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"regions\">\n    <header class=\"regions__header\">\n        <div class=\"regions__caption-left\">\n            <img src=\"assets/images/triangle.svg\" alt=\"triangle\" class=\"regions__triangle\">\n            <h1 class=\"regions__title\">\n                Regions\n            </h1>\n            <p class=\"regions__description\">\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce ut ex nulla. Morbi non lobortis lectus. Suspendisse pulvinar ipsum ipsum, vitae pellentesque lectus faucibus non. \n            </p>\n        </div>\n        <div class=\"regions__caption-right\">\n            <img src=\"assets/images/continents-of-earth.svg\" alt=\"continents\" class=\"regions__continents-img\">\n        </div>\n    </header>\n    <section class=\"regions__list\">\n        <regions-list-component></regions-list-component>\n    </section>\n</div>\n","\n\nimport { StoreModule } from '@ngrx/store';\nimport { AppComponent } from './app.component';\nimport {Reducers} from '../store/index';\nimport { EffectsModule } from '@ngrx/effects';\nimport { WorldEffects } from 'src/store/effects/world.effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from 'src/environments/environment';\nimport { NgModule } from '@angular/core';\nimport { HeaderComponent } from 'src/components/layout/header/header.component';\nimport { BodyComponent } from 'src/components/layout/body/body.component';\nimport { FooterComponent } from 'src/components/layout/footer/footer.component';\nimport { WizardComponent } from 'src/components/layout/wizard/wizard.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RegionsComponent } from 'src/components/regions/regions/regions.component';\nimport { RegionsListComponent } from 'src/components/regions/regions-list/regions-list.component';\nimport { RegionsItemComponent } from 'src/components/regions/regions-item/regions-item.component';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { CountriesListComponent } from 'src/components/countries/countries-list/countries-list.component';\nimport { CountriesComponent } from 'src/components/countries/countries/countries.component';\nimport { BreadcrumbsComponent } from 'src/components/layout/breadcrumbs/breadcrumbs.component';\nimport { SpinnerComponent } from 'src/components/layout/spinner/spinner.component';\nimport { CountryDetailsComponent } from 'src/components/countries/country-details/country-details.component';\nimport { JoinPipe } from 'src/pipes/join.pipe';\nimport { ThousandSuffixesPipe } from 'src/pipes/thousand-suffixes.pipe';\nimport { ModalComponent } from 'src/components/layout/modal/modal.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    BodyComponent,\n    FooterComponent,\n    WizardComponent,\n    RegionsComponent,\n    RegionsListComponent,\n    RegionsItemComponent,\n    CountriesListComponent,\n    CountriesComponent,\n    BreadcrumbsComponent,\n    SpinnerComponent,\n    CountryDetailsComponent,\n    ModalComponent,\n    JoinPipe,\n    ThousandSuffixesPipe\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    AppRoutingModule,\n    HttpClientModule,\n    StoreModule.forRoot(Reducers),\n    EffectsModule.forRoot([\n      WorldEffects,\n    ]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { WorldService } from \"src/services/world.service\";\r\nimport { AppState } from \"..\";\r\nimport { GetCountriesByRegionFailed, GetCountriesByRegionSuccessfully, GetCountryDetailsFailed, GetCountryDetailsSuccessfully, HideLoadingSpinner, ShowLoadingSpinner, WORLD_ACTION } from \"../actions/world.actions\";\r\nimport {catchError, map, switchMap, tap} from 'rxjs/operators';\r\nimport { Country } from \"src/models/interfaces/country.model\";\r\n\r\n@Injectable()\r\nexport class WorldEffects{\r\n\r\n    @Effect()\r\n    loadCountriesData$: Observable<Action> = this.actions$.pipe(\r\n        ofType(WORLD_ACTION.GET_COUNTRIES_BY_REGION),\r\n        tap(() => this.store.dispatch(new ShowLoadingSpinner())),\r\n        switchMap(\r\n            (action: any) => this.worldService.getCountriesByRegion(action.payload.region)\r\n                .pipe(\r\n                    map((response: Country[]) => new GetCountriesByRegionSuccessfully({regionName: action.payload.region, countries: response})),\r\n                    catchError(() => of(new GetCountriesByRegionFailed({error: \"Fetching countries failed\"}))),\r\n                    tap(() => this.store.dispatch(new HideLoadingSpinner()))\r\n                )\r\n        )\r\n    )\r\n\r\n    @Effect()\r\n    loadCountryDetails$: Observable<Action> = this.actions$.pipe(\r\n        ofType(WORLD_ACTION.GET_COUNTRY_DETAILS),\r\n        tap(() => this.store.dispatch(new ShowLoadingSpinner())),\r\n        switchMap(\r\n            (action: any) => this.worldService.getCountryDetails(action.payload.countryName)\r\n                .pipe(\r\n\r\n                    map((response: Country[]) => new GetCountryDetailsSuccessfully({regionName: action.payload.regionName, country: response[0]})),\r\n                    catchError(() => of(new GetCountryDetailsFailed({error: \"Fetching country details failed\"}))),\r\n                    tap(() => this.store.dispatch(new HideLoadingSpinner()))\r\n                )\r\n        )\r\n    )\r\n\r\n\r\n    constructor(private actions$: Actions,\r\n        private store: Store<AppState>,\r\n        private router: Router,\r\n        private worldService: WorldService) { }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Regions } from 'src/models/namespaces/regions.namespace';\n\n@Component({\n  selector: 'regions-list-component',\n  templateUrl: './regions-list.component.html',\n  styleUrls: ['./regions-list.component.scss']\n})\nexport class RegionsListComponent implements OnInit {\n\n  public regions = [\n    Regions.AFRICA,\n    Regions.AMERICA,\n    Regions.ASIA,\n    Regions.EUROPE,\n    Regions.OCEANIA\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"regions-list\">\n    <h1 class=\"regions-list__title\">Choose region</h1>\n    <img src=\"assets/images/triangle.svg\" alt=\"triangle\" class=\"regions-list__triangle\">\n    <div class=\"regions-list__list\">\n        <div class=\"regions-list__item\" *ngFor=\"let region of regions\">\n            <regions-item-component\n            [region]=\"region\">\n            </regions-item-component>\n        </div>\n    </div>\n</div>\n","import produce from \"immer\"\r\nimport { Regions } from \"src/models/namespaces/regions.namespace\";\r\nimport { Region } from \"src/models/types/region.type\"\r\nimport { WORLD_ACTION } from \"../actions/world.actions\"\r\n\r\nexport interface WorldState {\r\n    isLoading: boolean,\r\n    regions: Array<{\r\n        name: Region;\r\n        countries: any[];\r\n        active: boolean\r\n    }>\r\n}\r\n\r\nconst initialWorldState: WorldState = {\r\n    isLoading: false,\r\n    regions: [\r\n        {\r\n            name: Regions.AFRICA,\r\n            countries: [],\r\n            active: false\r\n        },\r\n        {\r\n            name: Regions.AMERICA,\r\n            countries: [],\r\n            active: false\r\n        },\r\n        {\r\n            name: Regions.ASIA,\r\n            countries: [],\r\n            active: false\r\n        },\r\n        {\r\n            name: Regions.EUROPE,\r\n            countries: [],\r\n            active: false\r\n        },\r\n        {\r\n            name: Regions.OCEANIA,\r\n            countries: [],\r\n            active: false\r\n        },\r\n    ]\r\n}\r\n\r\nexport function worldReducer(worldState = initialWorldState, action): WorldState{\r\n    return produce((draft, worldAction) => {\r\n        switch(action.type){\r\n            \r\n            case WORLD_ACTION.GET_COUNTRIES_BY_REGION_SUCCESSFULLY:\r\n                const regionIndex = draft.regions.findIndex(region => region.name === action.payload.regionName);\r\n                if(regionIndex === -1) return;\r\n                draft.regions[regionIndex].countries = action.payload.countries;\r\n                return;\r\n\r\n            case WORLD_ACTION.GET_COUNTRY_DETAILS_SUCCESSFULLY:\r\n                const countryRegionIndex = draft.regions.findIndex(region => region.name === action.payload.regionName);\r\n                const fetchedCountry = action.payload.country;\r\n                if(countryRegionIndex === -1) return;\r\n                if(draft.regions[countryRegionIndex].countries.includes(country => country?.name?.common === fetchedCountry.name.common)) return;\r\n                draft.regions[countryRegionIndex].countries = [\r\n                    ...draft.regions[countryRegionIndex].countries,\r\n                    fetchedCountry\r\n                ]\r\n                return;\r\n\r\n            case WORLD_ACTION.GET_COUNTRY_DETAILS_FAILED:\r\n                console.error(action.payload.error);\r\n                return;\r\n\r\n            case WORLD_ACTION.GET_COUNTRIES_BY_REGION_FAILED:\r\n                console.error(action.payload.error);\r\n                return;\r\n\r\n            case WORLD_ACTION.SET_REGION_ACTIVE:\r\n                const regionActiveIndex = draft.regions.findIndex(region => region.name === action.payload.region);\r\n                if(regionActiveIndex === -1) return;\r\n                draft.regions.map(region => ({...region, active: false}));\r\n                draft.regions[regionActiveIndex].active = true;\r\n                return;\r\n            \r\n            case WORLD_ACTION.SHOW_LOADING_SPINNER:\r\n                draft.isLoading = true;\r\n                return;\r\n            \r\n            case WORLD_ACTION.HIDE_LOADING_SPINNER:\r\n                draft.isLoading = false;\r\n                return;\r\n        }\r\n    }, initialWorldState)(worldState, action)\r\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Region } from 'src/models/types/region.type';\nimport { AppState } from 'src/store';\nimport { GetCountriesByRegion } from 'src/store/actions/world.actions';\nimport { capitalizeFirstLetter } from 'src/utils/capitalize';\n\n@Component({\n  selector: 'app-countries',\n  templateUrl: './countries.component.html',\n  styleUrls: ['./countries.component.scss']\n})\nexport class CountriesComponent implements OnInit {\n\n  private region: Region;\n  public capitalizedRegion: string;\n  public routeForBreadcrumbs: {\n    route: string;\n    routeName: string;\n  }[];\n\n  constructor(private route: ActivatedRoute, private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.region = this.route.snapshot.paramMap.get('region') as Region;\n    this.capitalizedRegion = capitalizeFirstLetter(this.region);\n    if(this.region) \n    this.routeForBreadcrumbs = [\n      {\n        route: '/regions',\n        routeName: 'Regions'\n      },\n      {\n        route: '/regions/' + this.region,\n        routeName: capitalizeFirstLetter(this.region)\n      }\n    ]\n  }\n\n}\n\n","<div class=\"countries\">\n    <header class=\"countries__header\">\n            <breadcrumbs-component [breadcrumbs]=\"routeForBreadcrumbs\"></breadcrumbs-component>\n            <img src=\"assets/images/triangle.svg\" alt=\"triangle\" class=\"countries__triangle\">\n            <h1 class=\"countries__title\">\n                {{capitalizedRegion + \"'s countries\"}}\n            </h1>\n            <p class=\"countries__description\">\n                Select a country by clicking on the appropriate row in the table and find out more about it!\n            </p>\n    </header>\n    <section class=\"countries__list\">\n        <countries-list-component></countries-list-component>\n    </section>\n</div>\n\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'thousandSuff'\r\n})\r\nexport class ThousandSuffixesPipe implements PipeTransform {\r\n\r\n  transform(input: any, args?: any): any {\r\n    let exp, suffixes = ['k', 'M', 'G', 'T', 'P', 'E'];\r\n\r\n    if (Number.isNaN(input)) {\r\n      return null;\r\n    }\r\n\r\n    if (input < 1000) {\r\n      return input;\r\n    }\r\n\r\n    exp = Math.floor(Math.log(input) / Math.log(1000));\r\n\r\n    return (input / Math.pow(1000, exp)).toFixed(args) + suffixes[exp - 1];\r\n\r\n\r\n  }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { AppState, isLoading } from 'src/store';\n\n@Component({\n  selector: 'wizard-component',\n  templateUrl: './wizard.component.html',\n  styleUrls: ['./wizard.component.scss']\n})\nexport class WizardComponent implements OnInit {\n\n  isLoading$: Observable<boolean>;\n\n  constructor(private store: Store<AppState>) { }\n\n  ngOnInit(): void {\n    this.isLoading$ = this.store.pipe(select(isLoading));    \n  }\n\n}\n","<div class=\"wizard\">\n    <div class=\"wizard__header\">\n        <header-component></header-component>\n    </div>\n    <div class=\"wizard__body\">\n        <body-component></body-component>\n    </div>\n    <div class=\"wizard__footer\">\n        <footer-component></footer-component>\n    </div>\n</div>\n\n<spinner-component *ngIf=\"isLoading$ | async\"></spinner-component>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'spinner-component',\n  templateUrl: './spinner.component.html',\n  styleUrls: ['./spinner.component.scss']\n})\nexport class SpinnerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"spinner-background\">\n    <div class=\"lds-dual-ring\">\n    </div>\n</div>\n","import { Pipe, PipeTransform, NgModule } from '@angular/core';\r\nimport { isArray } from 'src/utils/is-array';\r\n\r\n@Pipe({\r\n  name: 'join',\r\n})\r\nexport class JoinPipe implements PipeTransform {\r\n  transform(input: any, character: string = ''): any {\r\n    if (!isArray(input)) {\r\n      return input;\r\n    }\r\n\r\n    return input.join(character);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\nimport { environment } from \"src/environments/environment\";\nimport { Region } from \"src/models/types/region.type\";\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from \"rxjs\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorldService {\n\n  private readonly regionCountriesEndpoint = environment.worldApi + \"region\";\n  private readonly countryDetailsEndpoint = environment.worldApi + \"name\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  getCountriesByRegion(region: Region): Observable<Object> {\n    return this.httpClient\n      .get(`${this.regionCountriesEndpoint}/${region}`);\n  }\n\n  getCountryDetails(countryName: string): Observable<Object>{\n    return this.httpClient\n      .get(`${this.countryDetailsEndpoint}/${countryName}`);\n  }\n}\n","export namespace Regions {\r\n    export const EUROPE = 'europe'\r\n    export const AMERICA = 'america';\r\n    export const ASIA = 'asia';\r\n    export const OCEANIA = 'oceania';\r\n    export const AFRICA = 'africa';\r\n}","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'footer-component',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  public isModalOpened = false;\n\n  constructor(private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  openModal(): void{\n    this.isModalOpened = true;\n  }\n\n  closeModal(): void{\n    this.isModalOpened = false;\n  }\n\n  navigateToHome(): void{\n    this.router.navigate(['/']);\n  }\n\n}\n","<footer class=\"footer\">\n    <div class=\"footer__content\">\n        <div class=\"footer__logo\" (click)=\"navigateToHome()\">\n            <img src=\"assets/images/world.svg\" alt=\"world\" class=\"world-icon\">\n        </div>\n        <button class=\"btn primary-btn footer__btn\" (click)=\"openModal()\">About me</button>\n    </div>\n    <div class=\"footer__bottom\">\n        <span class=\"footer__rights\">All rights reserved. Copyright © 2022 Daniel Staszewski</span>\n    </div>\n</footer>\n\n<ng-container *ngIf=\"isModalOpened\">\n    <modal-component title=\"About me\" (cancelClicked)=\"closeModal()\">\n        <div class=\"footer-modal\">\n            <img src=\"assets/images/profile.png\" alt=\"face\" class=\"footer-modal__img\">\n            <div class=\"footer-modal__content\">\n                <h2 class=\"footer-modal__name\">Daniel Staszewski</h2>\n                <p class=\"footer-modal__description\">I am a graduate of Social Informatics, and I am constantly \n                    developing my skills in Web Development, UX / UI, HCI, \n                    and interface design. Frontend programming is my passion; I greatly support the TypeScript language and the Angular \n                    framework. I also develop skills in the React library. I have \n                    experience in designing applications/websites.</p>\n            </div>\n        </div>\n    </modal-component>\n</ng-container>\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CountriesComponent } from 'src/components/countries/countries/countries.component';\r\nimport { CountryDetailsComponent } from 'src/components/countries/country-details/country-details.component';\r\nimport { RegionsComponent } from 'src/components/regions/regions/regions.component';\r\n\r\nconst routes: Routes = [\r\n    {path: '', redirectTo: 'regions', pathMatch: 'full'}, \r\n    {path: 'regions', component: RegionsComponent}, \r\n    {path: 'regions/:region', component: CountriesComponent },\r\n    {path: 'regions/:region/:country', component: CountryDetailsComponent },\r\n    {path: '**', redirectTo: 'regions', pathMatch: 'full' }\r\n  ];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}